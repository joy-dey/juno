/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface ChatArea {
        /**
          * @default false
         */
        "isBotTyping": boolean;
        /**
          * @default false
         */
        "isSocketConnected": boolean;
        "messages": { type: 'user' | 'bot'; message: string }[];
    }
    interface ChatBubble {
        /**
          * @default ''
         */
        "message": string;
        /**
          * @default 'bot'
         */
        "type": 'bot' | 'user';
    }
    interface ChatWidget {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface TypingIndicator {
    }
}
export interface ChatAreaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChatAreaElement;
}
export interface ChatWidgetCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChatWidgetElement;
}
declare global {
    interface HTMLChatAreaElementEventMap {
        "sentMessage": string;
        "requestClose": void;
    }
    interface HTMLChatAreaElement extends Components.ChatArea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChatAreaElementEventMap>(type: K, listener: (this: HTMLChatAreaElement, ev: ChatAreaCustomEvent<HTMLChatAreaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChatAreaElementEventMap>(type: K, listener: (this: HTMLChatAreaElement, ev: ChatAreaCustomEvent<HTMLChatAreaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChatAreaElement: {
        prototype: HTMLChatAreaElement;
        new (): HTMLChatAreaElement;
    };
    interface HTMLChatBubbleElement extends Components.ChatBubble, HTMLStencilElement {
    }
    var HTMLChatBubbleElement: {
        prototype: HTMLChatBubbleElement;
        new (): HTMLChatBubbleElement;
    };
    interface HTMLChatWidgetElementEventMap {
        "socketChangeStatus": boolean;
    }
    interface HTMLChatWidgetElement extends Components.ChatWidget, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChatWidgetElementEventMap>(type: K, listener: (this: HTMLChatWidgetElement, ev: ChatWidgetCustomEvent<HTMLChatWidgetElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChatWidgetElementEventMap>(type: K, listener: (this: HTMLChatWidgetElement, ev: ChatWidgetCustomEvent<HTMLChatWidgetElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChatWidgetElement: {
        prototype: HTMLChatWidgetElement;
        new (): HTMLChatWidgetElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLTypingIndicatorElement extends Components.TypingIndicator, HTMLStencilElement {
    }
    var HTMLTypingIndicatorElement: {
        prototype: HTMLTypingIndicatorElement;
        new (): HTMLTypingIndicatorElement;
    };
    interface HTMLElementTagNameMap {
        "chat-area": HTMLChatAreaElement;
        "chat-bubble": HTMLChatBubbleElement;
        "chat-widget": HTMLChatWidgetElement;
        "my-component": HTMLMyComponentElement;
        "typing-indicator": HTMLTypingIndicatorElement;
    }
}
declare namespace LocalJSX {
    interface ChatArea {
        /**
          * @default false
         */
        "isBotTyping"?: boolean;
        /**
          * @default false
         */
        "isSocketConnected"?: boolean;
        "messages"?: { type: 'user' | 'bot'; message: string }[];
        "onRequestClose"?: (event: ChatAreaCustomEvent<void>) => void;
        "onSentMessage"?: (event: ChatAreaCustomEvent<string>) => void;
    }
    interface ChatBubble {
        /**
          * @default ''
         */
        "message"?: string;
        /**
          * @default 'bot'
         */
        "type"?: 'bot' | 'user';
    }
    interface ChatWidget {
        "onSocketChangeStatus"?: (event: ChatWidgetCustomEvent<boolean>) => void;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface TypingIndicator {
    }
    interface IntrinsicElements {
        "chat-area": ChatArea;
        "chat-bubble": ChatBubble;
        "chat-widget": ChatWidget;
        "my-component": MyComponent;
        "typing-indicator": TypingIndicator;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "chat-area": LocalJSX.ChatArea & JSXBase.HTMLAttributes<HTMLChatAreaElement>;
            "chat-bubble": LocalJSX.ChatBubble & JSXBase.HTMLAttributes<HTMLChatBubbleElement>;
            "chat-widget": LocalJSX.ChatWidget & JSXBase.HTMLAttributes<HTMLChatWidgetElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "typing-indicator": LocalJSX.TypingIndicator & JSXBase.HTMLAttributes<HTMLTypingIndicatorElement>;
        }
    }
}
