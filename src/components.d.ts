/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface ChatArea {
        /**
          * @default ''
         */
        "agent": string;
        /**
          * @default "I'm an AI chatbot. While I aim for accuracy, my responses may not always be entirely correct or up-to-date."
         */
        "disclaimerText": string;
    }
    interface ChatBubble {
        /**
          * @default ''
         */
        "message": string;
        /**
          * @default ''
         */
        "timestamp": string;
        /**
          * @default 'bot'
         */
        "type": 'bot' | 'user';
    }
    interface ChatWidget {
        /**
          * @default 'Juno'
         */
        "agent": string;
        /**
          * @default 'oklch(0.491 0.27 292.581)'
         */
        "buttonBackground": string;
        /**
          * @default ''
         */
        "socketURL": string;
    }
    interface TypingIndicator {
    }
}
export interface ChatAreaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChatAreaElement;
}
declare global {
    interface HTMLChatAreaElementEventMap {
        "sentMessage": string;
        "requestSocketReconnection": void;
    }
    interface HTMLChatAreaElement extends Components.ChatArea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChatAreaElementEventMap>(type: K, listener: (this: HTMLChatAreaElement, ev: ChatAreaCustomEvent<HTMLChatAreaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChatAreaElementEventMap>(type: K, listener: (this: HTMLChatAreaElement, ev: ChatAreaCustomEvent<HTMLChatAreaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChatAreaElement: {
        prototype: HTMLChatAreaElement;
        new (): HTMLChatAreaElement;
    };
    interface HTMLChatBubbleElement extends Components.ChatBubble, HTMLStencilElement {
    }
    var HTMLChatBubbleElement: {
        prototype: HTMLChatBubbleElement;
        new (): HTMLChatBubbleElement;
    };
    interface HTMLChatWidgetElement extends Components.ChatWidget, HTMLStencilElement {
    }
    var HTMLChatWidgetElement: {
        prototype: HTMLChatWidgetElement;
        new (): HTMLChatWidgetElement;
    };
    interface HTMLTypingIndicatorElement extends Components.TypingIndicator, HTMLStencilElement {
    }
    var HTMLTypingIndicatorElement: {
        prototype: HTMLTypingIndicatorElement;
        new (): HTMLTypingIndicatorElement;
    };
    interface HTMLElementTagNameMap {
        "chat-area": HTMLChatAreaElement;
        "chat-bubble": HTMLChatBubbleElement;
        "chat-widget": HTMLChatWidgetElement;
        "typing-indicator": HTMLTypingIndicatorElement;
    }
}
declare namespace LocalJSX {
    interface ChatArea {
        /**
          * @default ''
         */
        "agent"?: string;
        /**
          * @default "I'm an AI chatbot. While I aim for accuracy, my responses may not always be entirely correct or up-to-date."
         */
        "disclaimerText"?: string;
        "onRequestSocketReconnection"?: (event: ChatAreaCustomEvent<void>) => void;
        "onSentMessage"?: (event: ChatAreaCustomEvent<string>) => void;
    }
    interface ChatBubble {
        /**
          * @default ''
         */
        "message"?: string;
        /**
          * @default ''
         */
        "timestamp"?: string;
        /**
          * @default 'bot'
         */
        "type"?: 'bot' | 'user';
    }
    interface ChatWidget {
        /**
          * @default 'Juno'
         */
        "agent"?: string;
        /**
          * @default 'oklch(0.491 0.27 292.581)'
         */
        "buttonBackground"?: string;
        /**
          * @default ''
         */
        "socketURL"?: string;
    }
    interface TypingIndicator {
    }
    interface IntrinsicElements {
        "chat-area": ChatArea;
        "chat-bubble": ChatBubble;
        "chat-widget": ChatWidget;
        "typing-indicator": TypingIndicator;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "chat-area": LocalJSX.ChatArea & JSXBase.HTMLAttributes<HTMLChatAreaElement>;
            "chat-bubble": LocalJSX.ChatBubble & JSXBase.HTMLAttributes<HTMLChatBubbleElement>;
            "chat-widget": LocalJSX.ChatWidget & JSXBase.HTMLAttributes<HTMLChatWidgetElement>;
            "typing-indicator": LocalJSX.TypingIndicator & JSXBase.HTMLAttributes<HTMLTypingIndicatorElement>;
        }
    }
}
